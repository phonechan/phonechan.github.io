---
layout: post
title:  "Commit message 和 Change log 编写指南"
date:   2016-03-11 23:07:05 +0800
categories: jekyll update
---


Git每次提交代码，都要填写Commit Message--提交说明，否则就不允许提交。

```git
$ git commit -m "commit message"
```

上面代码的`-m`参数，就是用来指定commit message的。
如果一行不够，可以执行`git commit`，就会跳出文本编辑器，让你写多行。

```git
$ git commit
```

![git commit](/image/img20160312000.png)

在这里，按键盘编辑插入命令`i`，基本上，你写什么都行~

![](/image/img20160312001.png)

**BUT，BUT，但是**，一般说来，commit message应该清晰明了，说明本次提交的目的。

![](/image/img20160312002.png)

目前，社区有多种commit message的写法规范，本文介绍一种目前使用最广泛的写法，比较合理和系统化，并且有配套的工具。

## 一、commit message的作用

格式化的commit message，有几个好处。
### 1.1、提供更多的历史信息，方便快速浏览
比如,下面的命令是显示上次发布后的变动，每个commit占据一行，你只看首行，就知道某次commit的作用。

```git
$ git log <last tag> HEAD --pretty=format:%s
```

![](/image/img20160312003.png)

### 1.2、可以过滤某些commit，便于快速查找信息。
比如，下面的命令仅仅显示本次发布新增的功能。
```git
$ git log <last release> HEAD --grep feature
```

### 1.3、可以直接从commit生成change log。
change log是发布新版本的时候，用来说明与上一个版本的差异的文档。

![](/image/img20160312004.png)

## 二、commit message的格式

每次提交，commit message都包括三个部分：Header，Body，Footer。

```html
<type>(<scope>): <subject>
// 空一行
<body>
// 空一行
<footer>
```

其中，Header是必要的，Body和Footer可以省略。
不管是哪一个部分，任何一行都不得超过72个字符（或100个字符），这是为了避免自动换行从而影响美观。
### 2.1、Header
Header部分只有一行，包括三个字段：`type`(必需)，`scope`(可选)和`subject`(必需)。
#### 【1】type 
 `type` 用于说明commit的类别，只允许使用下面7个标示。
> * feat : 新功能（feature）
> * fix : 修补bug 
> * docs : 文档（documentation）
> * style : 格式（不影响代码的运行）
> * refactor : 重构（既不是新增功能，也不是修改代码的变动）
> * test : 增加测试
> * chore : 构建过程或辅助工具的变动

如果 **type 为 `feat` 和 `fix` ，则该 commit message 将肯定出现在 Change log 之中。**其他情况（docs、chore、style、refactor、test）由你决定要不要放入 Change log，建议是不要。

#### 【2】scope
 `scope` 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。
#### 【3】subject
 `subject` 是 commit 目的的简短描述，不超过50个字符。
> * 以动词开头，使用第一人称现在时，比如`change`，而不是`changed`或`changes`
> * 第一个字母小写
> * 结尾不加句号（.）
   


### 2.2、Body
Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。

```
More detailed explanatory text, if necessary.  Wrap it to 
about 72 characters or so. 

Further paragraphs come after blank lines.

- Bullet points are okay, too
- Use a hanging indent
```

有两个注意点。
（1）使用第一人称现在时，比如使用`change`而不是`changed`或`changes`。
（2）应该说明代码变动的动机，以及与以前行为的对比。
    
### 2.3、Footer
Footer 部分只用于两种情况。
####【1】不兼容变动
如果当前代码与上一个版本不兼容，泽Footer部分以`BREAKING CHANGE`开头，后面是对变动的描述、以及变动理由和迁移方法。

```git
BREAKING CHANGE: isolate scope bindings definition has changed.

    To migrate the code follow the example below:

    Before:

    scope: {
      myAttr: 'attribute',
    }

    After:

    scope: {
      myAttr: '@',
    }

    The removed `inject` wasnt generaly useful for directives so there should be no code using it.
```

####【2】关闭 Issue

如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。

```git
 Closes #234
```

也可以一次关闭多个 issue 。

```
Closes #123, #245, #992
```

### 2.4、Revert
还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。

```git
revert: feat(pencil): add 'graphiteWidth' option

This reverts commit 667ecc1654a317a13331b17617d973392f415f02.
```

> Body部分的格式是固定的，必须写成`This reverts commit <hash>`.，其中的hash是被撤销 commit 的 SHA 标识符。

> 如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的`Reverts`小标题下面。

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
