<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>phonechan.github.io</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Mar 2016 13:26:29 +0800</pubDate>
    <lastBuildDate>Mon, 14 Mar 2016 13:26:29 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Android系统中Parcelable和Serializable的区别</title>
        <description>&lt;p&gt;进行Android开发的时候，我们都知道，不能将对象的引用传递给activity或者fragment，我们需要将这些对象放到一个Intent或者Bundle里面，然后传递。通过Android的API文档，我们知道传递对象时需要对我们的对象进行&lt;code class=&quot;highlighter-rouge&quot;&gt;Parcelable&lt;/code&gt;化或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Serializable&lt;/code&gt;化。作为java开发者，相信大家都对Serializable机制有一定的了解，那么为什么还需要Parcelable呢？&lt;/p&gt;

&lt;p&gt;为了回答这个问题，让我们分别来看看这两者的差异。&lt;/p&gt;

&lt;h2 id=&quot;serializable-&quot;&gt;Serializable, 简单易用&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SerializableDeveloper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skillSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Serializable&lt;/code&gt;的迷人之处在于你只需要对某个类以及它的属性实现Serializable接口即可。Serializable接口是一种标识性接口（&lt;code class=&quot;highlighter-rouge&quot;&gt;marker interface&lt;/code&gt;），这意味着无需实现方法，java便会对这个对象进行高效的序列化操作。&lt;/p&gt;

&lt;p&gt;这种方法的缺点是使用了反射，序列化的过程比较慢。这种机制会在序列化的时候创建许多的临时对象，容易触发
垃圾回收。&lt;/p&gt;

&lt;h2 id=&quot;parcelable-&quot;&gt;Parcelable, 速度至上&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ParcelableDeveloper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skillSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;favorite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skillSet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readTypedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skillSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;favorite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeToParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;years&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeTypedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skillSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describeContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATOR&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createFromParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParcelableDeveloper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;related&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;related&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;writeToParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;related&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATOR&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Parcelable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Creator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createFromParcel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parcel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Skill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describeContents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;根据Google工程师的说法，这些代码会运行的特别快。原因之一就是我们已经很清楚的知道了序列化得过程，而不需要使用反射来推断。同时为了更快的进行序列化，对象的代码也需要高度的优化。&lt;/p&gt;

&lt;p&gt;因此，很明显实现Parcelable并不容易。实现Parcelable接口需要写大量的模板代码，这使得对象代码变得难以阅读和维护。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;速度测试&lt;/h2&gt;

&lt;p&gt;当然，我们还是想知道到底Parcelable相对于Serializable要快多少。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;测试方法&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、 通过将一个对象放到一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Bundle&lt;/code&gt;里面然后调用&lt;code class=&quot;highlighter-rouge&quot;&gt;writeToParcel(Parcel, int)&lt;/code&gt;方法，来模拟传递对象给一个activity的过程，然后再把这个对象取出来。&lt;/li&gt;
    &lt;li&gt;2、 在一个循环里面运行1000次&lt;/li&gt;
    &lt;li&gt;3、 两种方法分别测试10次来减少内存整理、CPU被其他应用占用等情况的干扰。&lt;/li&gt;
    &lt;li&gt;4、 参与测试的对象就是上面代码中的SerializableDeveloper和ParcelableDeveloper。&lt;/li&gt;
    &lt;li&gt;5、 在多种Android手机上进行测试&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;测试结果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160314000.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;table&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;&lt;em&gt;测试机型&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;&lt;em&gt;Serializable&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;&lt;em&gt;Parcelable&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;&lt;em&gt;提升倍数&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;LG Nexus 4 – Android 4.2.2&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;1.8539ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;0.1824ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;11.80倍&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;Samsung Nexus 10 – Android 4.2.2&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;1.0004ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;0.0850ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;10.16倍&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;HTC Desire Z – Android 2.3.3&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;5.1224ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;0.2938ms&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
        &lt;td&gt;17.36倍&lt;/td&gt;
        &lt;td&gt; &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;parcelable--serializable10nexus-10&quot;&gt;&lt;em&gt;由此可以得出: Parcelable 比 Serializable快了10多倍。有趣的是，即使在Nexus 10这样性能强悍的硬件上，一个相当简单的对象的序列化和反序列化的过程要花将近一毫秒。&lt;/em&gt;&lt;/h4&gt;

&lt;h2 id=&quot;section-3&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;如果你想成为一个优秀的软件工程师，你需要多花点时间来实现 Parcelable ，因为这将会为你对象的序列化过程快10多倍，而且占用较少的资源。&lt;/p&gt;

&lt;p&gt;但是大多数情况下， Serializable 的龟速不会太引人注目。你想偷点懒就用它吧，不过要记得serialization是一个比较耗资源的操作，尽量少使用。&lt;/p&gt;

&lt;p&gt;如果你想要传递一个包含许多对象的列表，那么整个序列化的过程的时间开销可能会超过一秒，这会让屏幕转向的时候变得很卡顿。&lt;/p&gt;
</description>
        <pubDate>Mon, 14 Mar 2016 11:26:05 +0800</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/03/14/parcelable-serializable.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/03/14/parcelable-serializable.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Commit message 和 Change log 编写指南</title>
        <description>&lt;p&gt;Git每次提交代码，都要填写Commit Message–提交说明，否则就不允许提交。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git commit -m &quot;commit message&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;参数，就是用来指定commit message的。
如果一行不够，可以执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;，就会跳出文本编辑器，让你写多行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160312000.png&quot; alt=&quot;git commit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这里，按键盘编辑插入命令&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;，基本上，你写什么都行~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160312001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BUT，BUT，但是&lt;/strong&gt;，一般说来，commit message应该清晰明了，说明本次提交的目的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160312002.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;目前，社区有多种commit message的写法规范，本文介绍一种目前使用最广泛的写法，比较合理和系统化，并且有配套的工具。&lt;/p&gt;

&lt;h2 id=&quot;commit-message&quot;&gt;一、commit message的作用&lt;/h2&gt;

&lt;p&gt;格式化的commit message，有几个好处。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;1.1、提供更多的历史信息，方便快速浏览&lt;/h3&gt;

&lt;p&gt;比如,下面的命令是显示上次发布后的变动，每个commit占据一行，你只看首行，就知道某次commit的作用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git log &amp;lt;last tag&amp;gt; HEAD --pretty=format:%s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160312003.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit&quot;&gt;1.2、可以过滤某些commit，便于快速查找信息。&lt;/h3&gt;

&lt;p&gt;比如，下面的命令仅仅显示本次发布新增的功能。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;$ git log &amp;lt;last release&amp;gt; HEAD --grep feature
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;commitchange-log&quot;&gt;1.3、可以直接从commit生成change log。&lt;/h3&gt;

&lt;p&gt;change log是发布新版本的时候，用来说明与上一个版本的差异的文档。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/image/img20160312004.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;commit-message-1&quot;&gt;二、commit message的格式&lt;/h2&gt;

&lt;p&gt;每次提交，commit message都包括三个部分：Header，Body，Footer。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;(&lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;): &lt;span class=&quot;nt&quot;&gt;&amp;lt;subject&amp;gt;&lt;/span&gt;
// 空一行
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
// 空一行
&lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，Header是必要的，Body和Footer可以省略。
不管是哪一个部分，任何一行都不得超过72个字符（或100个字符），这是为了避免自动换行从而影响美观。&lt;/p&gt;

&lt;h3 id=&quot;header&quot;&gt;2.1、Header&lt;/h3&gt;

&lt;p&gt;Header部分只有一行，包括三个字段：&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;(必需)，&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt;(可选)和&lt;code class=&quot;highlighter-rouge&quot;&gt;subject&lt;/code&gt;(必需)。&lt;/p&gt;

&lt;h4 id=&quot;type&quot;&gt;【1】type&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; 用于说明commit的类别，只允许使用下面7个标示。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;feat : 新功能（feature）&lt;/li&gt;
    &lt;li&gt;fix : 修补bug&lt;/li&gt;
    &lt;li&gt;docs : 文档（documentation）&lt;/li&gt;
    &lt;li&gt;style : 格式（不影响代码的运行）&lt;/li&gt;
    &lt;li&gt;refactor : 重构（既不是新增功能，也不是修改代码的变动）&lt;/li&gt;
    &lt;li&gt;test : 增加测试&lt;/li&gt;
    &lt;li&gt;chore : 构建过程或辅助工具的变动&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果 &lt;strong&gt;type 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;feat&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;fix&lt;/code&gt; ，则该 commit message 将肯定出现在 Change log 之中。&lt;/strong&gt;其他情况（docs、chore、style、refactor、test）由你决定要不要放入 Change log，建议是不要。&lt;/p&gt;

&lt;h4 id=&quot;scope&quot;&gt;【2】scope&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。&lt;/p&gt;

&lt;h4 id=&quot;subject&quot;&gt;【3】subject&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;subject&lt;/code&gt; 是 commit 目的的简短描述，不超过50个字符。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;以动词开头，使用第一人称现在时，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt;，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;changed&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;changes&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;第一个字母小写&lt;/li&gt;
    &lt;li&gt;结尾不加句号（.）&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;body&quot;&gt;2.2、Body&lt;/h3&gt;

&lt;p&gt;Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;More detailed explanatory text, if necessary.  Wrap it to
about 72 characters or so.

Further paragraphs come after blank lines.

- Bullet points are okay, too
- Use a hanging indent
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有两个注意点。
（1）使用第一人称现在时，比如使用&lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt;而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;changed&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;changes&lt;/code&gt;。
（2）应该说明代码变动的动机，以及与以前行为的对比。&lt;/p&gt;

&lt;h3 id=&quot;footer&quot;&gt;2.3、Footer&lt;/h3&gt;

&lt;p&gt;Footer 部分只用于两种情况。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;【1】不兼容变动&lt;/h4&gt;

&lt;p&gt;如果当前代码与上一个版本不兼容，泽Footer部分以&lt;code class=&quot;highlighter-rouge&quot;&gt;BREAKING CHANGE&lt;/code&gt;开头，后面是对变动的描述、以及变动理由和迁移方法。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;BREAKING CHANGE: isolate scope bindings definition has changed.

    To migrate the code follow the example below:

    Before:

    scope: {
      myAttr: &#39;attribute&#39;,
    }

    After:

    scope: {
      myAttr: &#39;@&#39;,
    }

    The removed `inject` wasnt generaly useful for directives so there should be no code using it.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;issue&quot;&gt;【2】关闭 Issue&lt;/h4&gt;

&lt;p&gt;如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt; Closes #234
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以一次关闭多个 issue 。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Closes #123, #245, #992
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;revert&quot;&gt;2.4、Revert&lt;/h3&gt;

&lt;p&gt;还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-git&quot;&gt;revert: feat(pencil): add &#39;graphiteWidth&#39; option

This reverts commit 667ecc1654a317a13331b17617d973392f415f02.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Body部分的格式是固定的，必须写成&lt;code class=&quot;highlighter-rouge&quot;&gt;This reverts commit &amp;lt;hash&amp;gt;&lt;/code&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的&lt;code class=&quot;highlighter-rouge&quot;&gt;Reverts&lt;/code&gt;小标题下面。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 23:07:05 +0800</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/03/11/commit-message.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/03/11/commit-message.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
